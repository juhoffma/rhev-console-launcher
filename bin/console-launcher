#!/usr/bin/env ruby

# Copyright 2013 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script calls the RHEV-M Virt API and creates callable cmd-lines
# to the remote viewer.
# 
# written by:
#   Juergen Hoffmann <buddy@redhat.com>
#   Thomas Crowe <tcrowe@redhat.com>
#   Vinny Valdez <vvaldez@redhat.com>
#
# May 14, 2013 
#   - initial version
# 
# May 22, 2013 
#   - Made sure to strip http and https from the host definition

require 'rubygems'
require 'console-launcher'
require 'console-launcher_version'
require 'optparse'
require 'yaml'
require 'sfl'

include Helper

Helper.load_options

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"


  opts.on('--print', 'Print the command that is called to launch the Console Session') do
    Helper::OPTIONS[:print] = true
  end

  opts.on('-d', '--dry-run', 'Do not execute the Remote Viewer Application') do
    Helper::OPTIONS[:dryrun] = true
  end

  opts.on('-h', '--host HOSTNAME', 'The Hostname of your RHEV-M Installation') do |host|
    Helper::OPTIONS[:host] = strip_url(host)
  end

  opts.on('-u', '--username USERNAME', 'The Username used to establish the connection to --host (defaults to admin@internal)') do |u|
    Helper::OPTIONS[:user] = u
  end

  opts.on('-p', '--password PASSWORD', 'The Password used to establish the connection to --host') do |pass|
    Helper::OPTIONS[:pass] = pass
  end

  # This displays the help screen, all programs are
  # assumed to have this option.
  opts.on('', '--help', 'Display this Help Message') do
    puts ""
    puts "This script connects to a RHEV-M Instance and lists all running VMs. You can choose which VM you want to"
    puts "connect to via SPICE Protocol."
    puts ""
    puts "This script requires a working SPICE Client for your platform. You can get it from"
    puts "   - MacOSX:    http://people.freedesktop.org/~teuf/spice-gtk-osx/dmg/0.3.1/"
    puts "   - Linux:     http://virt-manager.et.redhat.com/download/sources/virt-viewer/virt-viewer-0.5.6.tar.gz"
    puts "   - Windows:   http://virt-manager.org/download/sources/virt-viewer/virt-viewer-x64-0.5.6.msi"
    puts ""
    puts "Version: " + ConsoleLauncher::VERSION
    puts ""
    puts opts
    exit
  end
end

# Parse the command-line. Remember there are two forms
# of the parse method. The 'parse' method simply parses
# ARGV, while the 'parse!' method parses ARGV and removes
# any @options found there, as well as any parameters for
# the @options. What's left is the list of files to resize.
optparse.parse!

if Helper::OPTIONS[:host] == nil
  puts "ERROR: You have to configure RHEV-M Hostname to connect to"
  puts optparse.help
  exit 1
end

Helper::OPTIONS[:pass] = get_password() if Helper::OPTIONS[:pass] == nil

rhevm = RhevManager.new(Helper::OPTIONS[:host], Helper::OPTIONS[:user], Helper::OPTIONS[:pass])

while true do
  begin
    vms = rhevm.get_vms()

    # Print the selection to the User
    puts
    puts "Running Virtual Machines found for #{Helper::OPTIONS[:host]}:"
    vms.each_with_index do |v, index|
      puts "#{index+1}. Name: #{v.name} Description: #{v.description} State: #{v.state}"
    end
    puts
    puts "r. Refresh"
    puts "q. Quit"
    puts

    puts "Please select the VM you wish to open: "

    STDOUT.flush
    index = gets.chomp # Hackish, just wanting to add quit
    if index.to_s == "q"
      exit 0
    elsif index.to_s == "r"
      next
    end
    index = index.to_i

    if (1..vms.size).member?(index)
      command = rhevm.launch_viewer(index)
      puts command.join(" ") if Helper::OPTIONS[:print]
      unless Helper::OPTIONS[:dryrun]
        spawn(*command)
      end

      puts "Reloading Virtual Machines Selection Menu ..."
      sleep(2)
    else
      puts "ERROR: Your selection #{index} is out of range."
    end
  rescue => e
    puts "There was an error retrieving the Virtual Machines from #{Helper::OPTIONS[:host]}: #{e.message}"
    puts e.backtrace
    exit 1
  end
end

exit 0


